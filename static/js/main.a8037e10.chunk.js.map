{"version":3,"sources":["Components/Property.js","Components/Circle.js","App.js","serviceWorker.js","index.js"],"names":["Property","props","test","state","background","cx","cy","num","sq1","sq2","sq3","sq4","sq5","level","x","y","h","w","c","transform","field","id","el","height","width","fill","this","drawSquare","setState","React","Component","Circle","cx2","cy2","document","body","style","backgroundColor","elems","i","push","key","className","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a8037e10.chunk.js","sourcesContent":["import css from './Property.scss';\r\nimport React from 'react';\r\n\r\n\r\nclass Property extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.test=0;\r\n        this.state={\r\n            background: 'gray',\r\n            cx: 1000,\r\n            cy: 410,\r\n            num: props.num,\r\n            sq1: {},\r\n            sq2: {},\r\n            sq3: {},\r\n            sq4: {},\r\n            sq5: {},\r\n            level: 0\r\n        }\r\n    }\r\n    drawSquare(x, y, h, w, c = \"green\", transform = 0, field, id) {\r\n        var el = {};\r\n        el.id= \"house_\" + field + \"_\" + id;\r\n        el.x=x;\r\n        el.y=y;\r\n        el.height=h;\r\n        el.width=w;\r\n        el.fill=c;\r\n        el.transform=\"rotate(\" + transform + \",\" + this.state.cx + \",\" + this.state.cy + \")\";\r\n        return el;\r\n    }\r\n    componentDidMount()\r\n    {\r\n        //document.getElementById(\"house_1_1\").innerHTML = document.getElementById(\"house_1_1\").innerHTML;\r\n        var sq1=this.drawSquare(970+5,40,20,20,\"blue\",360/20*this.state.num,this.state.num,1);\r\n        var sq2=this.drawSquare(1000 + 5, 40, 20, 20,\"blue\",360/20*this.state.num,this.state.num,2);\r\n        var sq3=this.drawSquare(970 + 5, 70, 20, 20,\"blue\",360/20*this.state.num,this.state.num,3);\r\n        var sq4=this.drawSquare(1000 + 5, 70, 20, 20,\"blue\",360/20*this.state.num,this.state.num,4);\r\n        var sq5=this.drawSquare(980, 45, 40, 40,\"red\",360/20*this.state.num,this.state.num,5);\r\n        this.setState({sq1,sq2,sq3,sq4,sq5});\r\n    }\r\n    render()\r\n    {\r\n\r\nreturn (\r\n    <g>\r\n<rect id={this.state.sq1.id} x={this.state.sq1.x} y={this.state.sq1.y} height={this.state.sq1.height} width={this.state.sq1.width} fill={this.state.sq1.fill} transform={this.state.sq1.transform}></rect>\r\n<rect id={this.state.sq2.id} x={this.state.sq2.x} y={this.state.sq2.y} height={this.state.sq2.height} width={this.state.sq2.width} fill={this.state.sq2.fill} transform={this.state.sq2.transform}></rect>\r\n<rect id={this.state.sq3.id} x={this.state.sq3.x} y={this.state.sq3.y} height={this.state.sq3.height} width={this.state.sq3.width} fill={this.state.sq3.fill} transform={this.state.sq3.transform}></rect>\r\n<rect id={this.state.sq4.id} x={this.state.sq4.x} y={this.state.sq4.y} height={this.state.sq4.height} width={this.state.sq4.width} fill={this.state.sq4.fill} transform={this.state.sq4.transform}></rect>\r\n<rect id={this.state.sq5.id} x={this.state.sq5.x} y={this.state.sq5.y} height={this.state.sq5.height} width={this.state.sq5.width} fill={this.state.sq5.fill} transform={this.state.sq5.transform}></rect>\r\n</g>\r\n)\r\n    }\r\n}\r\nexport default Property;","import React from 'react';\r\nimport Element from './Property';\r\nimport css from './Circle.scss'\r\nclass Circle extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.test=0;\r\n        this.state={\r\n            background: 'gray',\r\n            cx2: 1000,\r\n            cy2: 410,\r\n            test:0\r\n        }\r\n    }\r\n    \r\n    componentDidMount()\r\n    {\r\n        document.body.style.backgroundColor = this.state.background;\r\n        //document.getElementById(\"canvas\").innerHTML = document.getElementById(\"canvas\").innerHTML;\r\n    }\r\n    \r\n    render()\r\n    {\r\nconst elems=[];\r\nfor(var i=0;i<20;i++)\r\nelems.push(<Element key={i} num={i}></Element>)\r\nreturn (\r\n<div>\r\n<svg className=\"svg-arrow\" id=\"canvas\" width=\"1500\" height=\"820\">\r\n<rect id=\"background\" width=\"100%\" height=\"100%\" fill=\"transparent\" />\r\n{elems}\r\n</svg>\r\n<div>transform=\"rotate(100,1000,410)\"</div>\r\n</div>\r\n)\r\n}\r\n}\r\nexport default Circle;","import React from 'react';\r\nimport Circle from './Components/Circle.js'\r\nimport css from './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <h1>This is a client page</h1>\r\n      <Circle/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}